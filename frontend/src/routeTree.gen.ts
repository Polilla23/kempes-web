/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResendVerificationEmailRouteImport } from './routes/resend-verification-email'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as VerifyEmailTokenRouteImport } from './routes/verify-email.$token'
import { Route as ResetPasswordTokenRouteImport } from './routes/reset-password.$token'
import { Route as RegisterTokenRouteImport } from './routes/register.$token'

const ResendVerificationEmailRoute = ResendVerificationEmailRouteImport.update({
  id: '/resend-verification-email',
  path: '/resend-verification-email',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const VerifyEmailTokenRoute = VerifyEmailTokenRouteImport.update({
  id: '/verify-email/$token',
  path: '/verify-email/$token',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetPasswordTokenRoute = ResetPasswordTokenRouteImport.update({
  id: '/reset-password/$token',
  path: '/reset-password/$token',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterTokenRoute = RegisterTokenRouteImport.update({
  id: '/register/$token',
  path: '/register/$token',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRoute
  '/login': typeof LoginRoute
  '/resend-verification-email': typeof ResendVerificationEmailRoute
  '/register/$token': typeof RegisterTokenRoute
  '/reset-password/$token': typeof ResetPasswordTokenRoute
  '/verify-email/$token': typeof VerifyEmailTokenRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminRoute
  '/login': typeof LoginRoute
  '/resend-verification-email': typeof ResendVerificationEmailRoute
  '/register/$token': typeof RegisterTokenRoute
  '/reset-password/$token': typeof ResetPasswordTokenRoute
  '/verify-email/$token': typeof VerifyEmailTokenRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/admin': typeof AdminRoute
  '/login': typeof LoginRoute
  '/resend-verification-email': typeof ResendVerificationEmailRoute
  '/register/$token': typeof RegisterTokenRoute
  '/reset-password/$token': typeof ResetPasswordTokenRoute
  '/verify-email/$token': typeof VerifyEmailTokenRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/login'
    | '/resend-verification-email'
    | '/register/$token'
    | '/reset-password/$token'
    | '/verify-email/$token'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/login'
    | '/resend-verification-email'
    | '/register/$token'
    | '/reset-password/$token'
    | '/verify-email/$token'
  id:
    | '__root__'
    | '/admin'
    | '/login'
    | '/resend-verification-email'
    | '/register/$token'
    | '/reset-password/$token'
    | '/verify-email/$token'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminRoute: typeof AdminRoute
  LoginRoute: typeof LoginRoute
  ResendVerificationEmailRoute: typeof ResendVerificationEmailRoute
  RegisterTokenRoute: typeof RegisterTokenRoute
  ResetPasswordTokenRoute: typeof ResetPasswordTokenRoute
  VerifyEmailTokenRoute: typeof VerifyEmailTokenRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/resend-verification-email': {
      id: '/resend-verification-email'
      path: '/resend-verification-email'
      fullPath: '/resend-verification-email'
      preLoaderRoute: typeof ResendVerificationEmailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/verify-email/$token': {
      id: '/verify-email/$token'
      path: '/verify-email/$token'
      fullPath: '/verify-email/$token'
      preLoaderRoute: typeof VerifyEmailTokenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reset-password/$token': {
      id: '/reset-password/$token'
      path: '/reset-password/$token'
      fullPath: '/reset-password/$token'
      preLoaderRoute: typeof ResetPasswordTokenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/$token': {
      id: '/register/$token'
      path: '/register/$token'
      fullPath: '/register/$token'
      preLoaderRoute: typeof RegisterTokenRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  AdminRoute: AdminRoute,
  LoginRoute: LoginRoute,
  ResendVerificationEmailRoute: ResendVerificationEmailRoute,
  RegisterTokenRoute: RegisterTokenRoute,
  ResetPasswordTokenRoute: ResetPasswordTokenRoute,
  VerifyEmailTokenRoute: VerifyEmailTokenRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
