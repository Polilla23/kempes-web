generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  role     RoleType? @default(USER)
  isVerified Boolean @default(false)  @map("is_verified")
  verificationToken String? @unique   @map("verification_token")
  verificationTokenExpires DateTime?  @map("verification_token_expires")
  resetPasswordToken String? @unique  @map("reset_password_token")
  resetPasswordTokenExpires DateTime? @map("reset_password_token_expires")
  club     Club?

  @@map("users")
}

model Club {
  id     String @id @default(uuid())
  name   String @unique
  logo   String?
  userId String? @unique @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  playerOwner Player[]  @relation("OwnerClub")
  playerNow   Player[]  @relation("ActualClub")
  isActive Boolean @default(true) @map("is_active")

  homeMatches Match[] @relation("HomeMatches")
  awayMatches Match[] @relation("AwayMatches")
  competitions  Competition[] @relation("CompetitionTeams")

  @@index([userId])
  @@map("clubs")
}

model Player {
  id            String  @id @default(uuid())
  name          String
  lastName      String  @map("last_name")
  birthdate     DateTime
  actualClubId  String  @map("actual_club_id") @default("null")
  ownerClubId   String  @map("owner_club_id") @default("null")
  actualClub    Club    @relation("ActualClub", fields: [actualClubId], references: [id])
  ownerClub     Club    @relation("OwnerClub", fields: [ownerClubId], references: [id])
  overall       Int?  @default(0)
  salary        Float   @default(100.000)
  sofifaId      String?  @map("sofifa_id") @default("null")
  transfermarktId String?  @map("transfermarkt_id")  @default("null")
  isKempesita   Boolean @map("is_kempesita")  @default(false)
  isActive      Boolean @map("is_active") @default(true)

  @@map("players")
}

model Season {
  id            String  @id @default(uuid())
  number        Int @unique
  isActive      Boolean @default(false)
  competitions  Competition[]
}

model Competition {
  id            String  @id @default(uuid())
  name          String  // Nombre constuido, ej: "Liga A Mayores - T7", "Copa de Oro - T10"
  system        CompetitionStage // Sitema de juego de ESTA instancia/fase

  seasonId      String
  competitionTypeId String

  // Para conectar fases (ej. Copa de Oro es hija de Copa Kempes)
  parentCompetitionId String? @unique
  parentCompetition Competition?  @relation("CompetitionPhases", fields: [parentCompetitionId], references: [id])
  childCompetition  Competition?  @relation("CompetitionPhases")

  // El cerebro de la flexibilidad: Aquí guardamos las reglas específicas.
  rules         Json
  /* Ejemplo de 'rules' para LIGA A:
    {
      "roundType": "ida_y_vuelta", // 'ida' o 'ida_y_vuelta'
      "playoffs": { "type": "TOP_3_FINALS", "teams": [1, 2, 3] },
      "playouts": { "type": "5_VS_6", "teams": [5, 6]},
      "promotions": {
        "A_vs_B": { "a_team_rank": 7, "b_team_rank": 2 },
        "A_vs_B_playout": { "a_team_rank": 6, "b_team_rank": 3 }
      }
    }

    Ejemplo de 'rules' para COPA KEMPES:
    {
      "numGroups": 5,
      "teamsPerGroup": 8,
      "qualifyToGold": 2, // Los 2 primeros de cada grupo a Copa de Oro
      "qualifyToSilver": 2 // El 3ro y 4to a Copa de Plata
    }
  */

  season        Season  @relation(fields: [seasonId], references: [id])
  competitionType CompetitionType @relation(fields: [competitionTypeId], references:[id])
  matches       Match[]
  teams         Club[]  @relation("CompetitionTeams")
}

model CompetitionType {
  id            String  @id @default(uuid())
  name          String  // "Liga A Mayores", "Copa Kempes", "Copa de Plata", "Liga B Kempesita"
  format        CompetitionFormat // Es una LIGA o una COPA
  competitions  Competition[]
}

model Match {
  id            String  @id @default(uuid())
  matchdayOrder Int // Fecha 1, 2... o Fase (16 = 16vos, 8 = 8vos)
  status        MatchStatus @default(PENDIENTE)
  homeClubId    String?
  awayClubId    String?
  homePlaceholder String?
  awayPlaceHolder String?
  homeClubGoals Int @default(0)
  awayClubGoals Int @default(0)
  competitionId String

  competition   Competition @relation(fields: [competitionId], references: [id])
  homeClub      Club? @relation("HomeMatches", fields: [homeClubId], references: [id])
  awayClub      Club? @relation("AwayMatches", fields: [awayClubId], references: [id])
}

// ENUMS AND TYPES

enum RoleType {
  ADMIN
  USER
}

enum MatchStatus {
  PENDIENTE
  FINALIZADO
  CANCELADO
}

enum CompetitionFormat {
  LEAGUE
  CUP
}

enum CompetitionStage {
  ROUND_ROBIN // Todos contra todos (Ligas, Fase de Grupos)
  KNOCKOUT // Eliminación directa
}
